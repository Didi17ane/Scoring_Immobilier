# import streamlit as st
# import pandas as pd

# # Charger les donn√©es avec score
# df = pd.read_csv("scoring_locataires_scores.csv")

# # Fonction de segmentation du risque
# def segmenter_risque(score):
#     if score > 70:
#         return "Faible Risque"
#     elif score >= 60:
#         return "Risque Moyen"
#     else:
#         return "Risque √âlev√©"

# # Appliquer la segmentation
# df["Risque"] = df["Score"].apply(segmenter_risque)

# # Couleurs personnalis√©es pour affichage conditionnel
# couleurs = {
#     "Faible Risque": "background-color: #d4edda; color: #155724",
#     "Risque Moyen": "background-color: #fff3cd; color: #856404",
#     "Risque √âlev√©": "background-color: #f8d7da; color: #721c24",
# }

# def colorer_ligne(row):
#     return [couleurs.get(row["Risque"], "")] * len(row)

# # Interface Streamlit
# st.set_page_config(page_title="Scoring Locataires Tylimmo", layout="wide")
# st.title("üìä Tableau de Scoring des Locataires")

# # Section r√©sum√© du rapport
# st.markdown("""
# ### üßæ √Ä propos du projet
# Ce tableau pr√©sente l'√©valuation de locataires fictifs selon plusieurs crit√®res :
# - Habitudes de paiement (ponctualit√©, retards, paiements fractionn√©s)
# - Revenus et emploi
# - Dur√©e dans le logement et conflits pass√©s

# Le score est calcul√© sur 100 et segment√© en trois cat√©gories de risque :
# - ‚úÖ **Faible Risque** (> 70)
# - ‚ö†Ô∏è **Risque Moyen** (60 √† 70)
# - ‚ùå **Risque √âlev√©** (< 60)
# """)

# # Affichage tableau stylis√©
# st.subheader("üìã Donn√©es des locataires")
# st.dataframe(df.style.apply(colorer_ligne, axis=1), use_container_width=True)

# # Graphique de r√©partition des risques
# st.subheader("üìä R√©partition des locataires par niveau de risque")
# st.bar_chart(df["Risque"].value_counts())

# # Graphique des scores individuels
# st.subheader("üìà Vue d'ensemble des scores")
# st.bar_chart(df[['Nom', 'Score']].set_index('Nom'))

# # Bouton de t√©l√©chargement du rapport PDF
# # with open("Rapport_Scoring_Tylimmo.pdf", "rb") as f:
# #    st.download_button("üì• T√©l√©charger le rapport PDF", f, file_name="Rapport_Scoring_Tylimmo.pdf")






















import streamlit as st
import pandas as pd
import random
import numpy as np

st.set_page_config(page_title="Scoring Locataires Tylimmo", layout="wide")
st.title("üìä  Tableau de Scoring des Locataires")

# 1. G√©n√©ration du dataset fictif
n = 100
noms = [f"Locataire_{i}" for i in range(n)] 
revenus = [random.randint(150000, 1000000) for _ in range(n)]
loyers = [random.randint(50000, 300000) for _ in range(n)]
types_location = random.choices(
    ["Appartement", "Villa", "Studio", "Chambre", "Bureau", "Commerce", "Entrep√¥t", "Appart'H√¥tel", "Espace de travail", "Terrain", "B√¢timent"],
    weights=[0.2, 0.15, 0.15, 0.1, 0.05, 0.05, 0.05, 0.05, 0.05, 0.075, 0.075],
    k=n
)
types_emploi = random.choices(
    ["CDI", "Fonctionnaire", "CDD", "Ind√©pendant", "Int√©rimaire", "Informel", "√âtudiant"],
    weights=[0.25, 0.15, 0.2, 0.15, 0.1, 0.1, 0.05],
    k=n
)
nombre_locations = [random.randint(1, 5) for _ in range(n)]
duree_location = [random.randint(1, 60) for _ in range(n)]
ponctualites = random.choices(["Oui", "Non"], weights=[0.7, 0.3], k=n)
observations = random.choices(["RAS", "Difficult√©s temporaires", "Retards fr√©quents", "Conflits"], weights=[0.5, 0.2, 0.2, 0.1], k=n)

paiements_a_temps = [random.randint(6, 12) if p == "A temps" else random.randint(0, 5) for p in ponctualites]
retards = [12 - pt if pt < 12 else random.randint(0, 3) for pt in paiements_a_temps]
duree_moy_retard = [round(random.uniform(0, 10), 1) if r > 0 else 0 for r in retards]
paiements_fractionnes = [random.randint(1, 3) if p == "Oui" else 0 for p in ponctualites]
conflits = ["Oui" if obs == "Conflits" else "Non" for obs in observations]

# Cr√©ation du DataFrame
df = pd.DataFrame({
    "Nom": noms,
    "Revenu_Mensuel": revenus,
    "Loyer_Mensuel": loyers,
    "Type_Location": types_location,
    "Type_Emploi": types_emploi,
    "Nombre_Locations": nombre_locations,
    "Duree_Location": duree_location,
    "Ponctualite_Paiement": ponctualites,
    "Observations": observations,
    "Paiements_A_Temps": paiements_a_temps,
    "Retards": retards,
    "Duree_Moyenne_Retard": duree_moy_retard,
    "Paiements_Fractionnes": paiements_fractionnes,
    "Conflits_Passes": conflits
})

# 2. Fonction de scoring automatique
def calculer_score(row):
    score = 0
    score += row['Paiements_A_Temps'] * 3         # sur 36
    score += (12 - row['Retards']) * 1            # sur 12
    score -= row['Duree_Moyenne_Retard'] * 0.5    # sur 10
    score += 5 if row['Paiements_Fractionnes'] == 0 else 0

    ratio_loyer = row['Loyer_Mensuel'] / row['Revenu_Mensuel']
    if ratio_loyer <= 0.25:
        score += 10
    elif ratio_loyer <= 0.35:
        score += 7
    elif ratio_loyer <= 0.5:
        score += 4
    else:
        score += 1

    emploi_score = {
        "CDI": 6, "Fonctionnaire": 6, "CDD": 4,
        "Ind√©pendant": 4, "Int√©rimaire": 3, "Informel": 2, "√âtudiant": 1
    }
    score += emploi_score.get(row['Type_Emploi'], 0)

    if row['Duree_Location'] >= 36:
        score += 5
    elif row['Duree_Location'] >= 24:
        score += 4
    elif row['Duree_Location'] >= 12:
        score += 3
    elif row['Duree_Location'] >= 6:
        score += 2
    else:
        score += 1

    score += min(row['Nombre_Locations'], 5) * 1
    score -= 5 if row['Conflits_Passes'] == "Oui" else 0

    return round(max(score, 0), 2)

df['Score'] = df.apply(calculer_score, axis=1)

# 3. Segmentation du risque
def segmenter_risque(score):
    if score > 70:
        return "Faible Risque"
    elif score >= 60:
        return "Risque Moyen"
    else:
        return "Risque √âlev√©"

df["Risque"] = df["Score"].apply(segmenter_risque)

# Couleurs personnalis√©es pour affichage conditionnel
couleurs = {
    "Faible Risque": "background-color: #d4edda; color: #155724",
    "Risque Moyen": "background-color: #fff3cd; color: #856404",
    "Risque √âlev√©": "background-color: #f8d7da; color: #721c24",
}

def colorer_ligne(row):
    return [couleurs.get(row["Risque"], "")] * len(row)

# Section r√©sum√© du rapport
st.markdown("""
### A propos du projet
Ce tableau pr√©sente l'√©valuation de locataires fictifs selon plusieurs crit√®res :

**Caract√©ristiques observ√©es :**
- Revenu mensuel, Loyer mensuel
- Type de location, Type d'emploi
- Nombre de locations pass√©es, Dur√©e de location
- Ponctualit√© de paiement, Observations

**Caract√©ristiques d√©duites automatiquement :**
- Nombre de paiements √† temps
- Nombre de retards
- Dur√©e moyenne des retards
- Nombre de paiements fractionn√©s
- Conflits pass√©s

Le score est calcul√© sur 100 et segment√© en trois cat√©gories de risque :
- ‚úÖ **Faible Risque** (> 70)
- ‚ö†Ô∏è **Risque Moyen** (60 √† 70)
- ‚ùå **Risque √âlev√©** (< 60)
""")

# Affichage tableau stylis√©
st.subheader(" Donn√©es des locataires")
st.dataframe(df.style.apply(colorer_ligne, axis=1), use_container_width=True)

# Graphique de r√©partition des risques
st.subheader("R√©partition des locataires par niveau de risque")
st.bar_chart(df["Risque"].value_counts())

# Graphique des scores individuels
st.subheader("Vue d'ensemble des scores")
st.bar_chart(df[['Nom', 'Score']].set_index('Nom'))

